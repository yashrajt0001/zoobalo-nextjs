import { createContext } from "react";

export interface UserContextType {
  // Define your context state and any methods here
  location: string;
  setLocation: (newString: string) => void;
  userId: any,
  setUserId: (newNumber:any) => void;
  userName: string;
  setUserName: (newString: string) => void;
  morningAddress: string;
  setMorningAddress: (newString: string) => void;
  eveningAddress: string;
  setEveningAddress: (newString: string) => void;
  dueTiffins: any,
  setDueTiffins: (newNumber:any) => void;
  mob: string;
  setMob: (newString: string) => void;
  balance: string;
  setBalance: (newString: string) => void;
  timing: string;
  setTiming: (newString: string) => void;
  feedbackId: number;
  setFeedbackId: (newId: number) => void;
  feedbackTitle: string;
  setFeedbackTitle: (newString: string) => void;
  feedbackBody: string;
  setFeedbackBody: (newString: string) => void;
  deliveryAgentName: string;
  setDeliveryAgentName: (newString: string) => void;
  deliveryAgentMob: string;
  setDeliveryAgentMob: (newString: string) => void;
  deliveryAgentParnterCode: string;
  setDeliveryAgentPartnerCode: (newString: string) => void;
  deliveryAgentId: number;
  setDeliveryAgentId: (newId: number) => void;
  userDetails: any;
  setUserDetails: (newArray: any) => void;
  cancelMeal: (id: number) => void;
  pauseMeal: (arr: any, userId: any) => void;
  demoDeliveries: any;
  setDemoDeliveries: (newArray: any) => void;
  results: any;
  setResults: (newArray: any) => void;
  getDemoDeliveries: () => void;
  getCompletedDeliveries: () => void;
  showCompleted: any;
  setShowCompleted: (newBoolean: any) => void;
  getExtraTiffinDeliveries: () => void;
  getCompletedExtraTiffinDeliveries: () => void;
  tiffinPackageId: any;
  setTiffinPackageId: (newId: any) => void;
  tiffinPackageName: any;
  setTiffinPackageName: (newName: any) => void;
  packageContain: any;
  setPackageContain: (newArray: any) => void;
  price: any;
  setPrice: (newArray: any) => void;
  extraTiffinDeliveries: any;
  setExtraTiffinDeliveries: (newArray: any) => void;
  kitchenHeadId: any;
  setKitchenHeadId: (newNumber: any) => void;
  kitchenHeadName: any;
  setKitchenHeadName: (newName: any) => void;
  kitchenId: any;
  setKitchenId: (newNumber: any) => void;
  kitchenName: any;
  setKitchenName: (newName: any) => void;
  kitchenAddress: any;
  setKitchenAddress: (newAdd: any) => void;
  kitchenHeadUsername: any;
  setKitchenHeadUsername: (newName: any) => void;
  kitchenHeadPassword: any;
  setKitchenHeadPassword: (newPass: any) => void;
  kitchenHeadStatus: any;
  setKitchenHeadStatus: (newStatus: any) => void;
  kitchenHeadPhone: any;
  setKitchenHeadPhone: (newName: any) => void;
  areaManagerId: any;
  setAreaManagerId: (newId: any) => void;
  areaManagerName: any;
  setAreaManagerName: (newId: any) => void;
  areaManagerUsername: any;
  setAreaManagerUsername: (newId: any) => void;
  areaManagerEmail: any;
  setAreaManagerEmail: (newId: any) => void;
  areaManagerPhone: any;
  setAreaManagerPhone: (newId: any) => void;
  areaManagerPassword: any;
  setAreaManagerPassword: (newId: any) => void;
  areaManagerAlternatePhone: any;
  setAreaManagerAlternatePhone: (newId: any) => void;
  areaManagerEmergencyPhone: any;
  setAreaManagerEmergencyPhone: (newId: any) => void;
  areaManagerResidentAddress: any;
  setAreaManagerResidentAddress: (newId: any) => void;
  areaManagerOfficeAddress: any;
  setAreaManagerOfficeAddress: (newId: any) => void;
}

const UserContext = createContext<UserContextType | null>(null);

export default UserContext;
